<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\StrongComponent\XmlWriter.cpp-----!>
<!-------Published on :04:04:2017 15:35:37-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\StrongComponent\XmlWriter.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\StrongComponent\XmlWriter.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp</a><br> </div></hr><pre>///////////////////////////////////////////////////////////////////////
// XmlWriter.cpp - Create XML Strings                                //
// ver 4                                                             //
// Language:    Visual C++, Visual Studio 2010, SP1                  //
// platform:    Toshiba Portege R705, Windows 7, Home Premium, SP1   //
// Application: Summer 2011 Projects                                 //
// Author:      Jim Fawcett, Syracuse University, CST 4-187          //
//              www.lcs.syr.edu/faculty/fawcett, (315) 443-3948      //
///////////////////////////////////////////////////////////////////////

#include "XmlWriter.h"

//----&lt; indent helper function &gt;-------------------------------------

void XmlWriter::indentIt()
<details><summary>{</summary>
	_xml += '\n';
	for (size_t i = 0; i&lt;_level; ++i)
		_xml += "  ";
</details>}
//----&lt; add opening tag &gt;--------------------------------------------

XmlWriter& XmlWriter::start(const std::string& tag)
<details><summary>{</summary>
	if (_indented)
<details><summary>	{</summary>
		indentIt();
		++_level;
</details>	}
	_tag = tag;
	_xml += '&lt;' + tag + '&gt;';
	tagStack.push(tag);
	return *this;
</details>}
//----&lt; add attribute to opening tag &gt;-------------------------------
//
//  Must be applied before adding body or closing
//
XmlWriter& XmlWriter::addAttribute(const std::string& name, const std::string& value)
<details><summary>{</summary>
	position = _xml.find_last_of('&gt;');
	if (_xml[--position] == '/')
<details><summary>	{</summary>
		_xml.insert(position, '"' + value + '"' + ' ');
		_xml.insert(position, name + '=');
</details>	}
	else
<details><summary>	{</summary>
		_xml.insert(++position, '"' + value + '"');
		_xml.insert(position, ' ' + name + '=');
</details>	}
	return *this;
</details>}
//----&lt; add body string to opening tag &gt;-----------------------------

XmlWriter& XmlWriter::addBody(const std::string& body)
<details><summary>{</summary>
	if (_indented)
<details><summary>	{</summary>
		indentIt();
</details>	}
	_xml += body;
	return *this;
</details>}
//----&lt; add closing tag &gt;--------------------------------------------

XmlWriter& XmlWriter::end()
<details><summary>{</summary>
	if (_indented)
<details><summary>	{</summary>
		--_level;
		indentIt();
</details>	}
	_tag = tagStack.top();
	tagStack.pop();
	_xml += "&lt;/" + _tag + '&gt;';
	return *this;
</details>}
//----&lt; construct element from tag and body &gt;------------------------

XmlWriter& XmlWriter::element(const std::string& tag, const std::string& body)
<details><summary>{</summary>
	start(tag);
	addBody(body);
	end();
	return *this;
</details>}
//----&lt; add XML declaration &gt;----------------------------------------
//
//  May be invoked once anytime during construction
//
XmlWriter& XmlWriter::addDeclaration()
<details><summary>{</summary>
	_xml = "&lt;? xml version=\"1.0\" ?&gt;" + _xml;
	return *this;
</details>}
//----&lt; add XML comment ---------------------------------------------
//
//  Will be placed at the end of XML constructed so far
//
XmlWriter& XmlWriter::addComment(const std::string& cmt)
<details><summary>{</summary>
	if (_indented)
<details><summary>	{</summary>
		indentIt();
</details>	}
	_xml += "&lt;!-- " + cmt + " --&gt;";
	return *this;
</details>}
//----&lt; test stub &gt;--------------------------------------------------

#ifdef TEST_XMLWRITER

#include &lt;iostream&gt;
#include &lt;fstream&gt;

void mOut(const std::string& message)
<details><summary>{</summary>
	std::cout &lt;&lt; "\n  " &lt;&lt; message.c_str();
</details>}

void main()
<details><summary>{</summary>
	mOut("Testing XmlWriter");
	mOut("=================");

	mOut("creating XML writer object:");
	XmlWriter wtr;
	wtr.indent();

	mOut("adding XML declaration:");
	wtr.addDeclaration();
	mOut(wtr.xml());

	mOut("adding comment:");
	wtr.addComment("top level comment");
	mOut(wtr.xml());

	mOut("adding root element:");
	wtr.start("root");
	mOut(wtr.xml());

	mOut("adding attributes:");
	wtr.addAttribute("att1", "val1");
	wtr.addAttribute("att2", "val2");
	mOut(wtr.xml());

	mOut("adding comment:");
	wtr.addComment("comment in root's body");
	mOut(wtr.xml());

	mOut("Creating self-closing element:");
	wtr.start("child1");
	mOut(wtr.xml());

	mOut("adding attribute:");
	wtr.addAttribute("c1name", "c1value");
	mOut(wtr.xml());

	mOut("adding child to root's body:");
	wtr.end();
	mOut(wtr.xml());

	mOut("adding another comment");
	wtr.addComment("another root's body comment");
	mOut(wtr.xml());

	wtr.start("child2");
	wtr.start("grandchild21");
	wtr.end();
	wtr.end();

	mOut("adding string to root's body:");
	wtr.addBody("root's body");
	mOut(wtr.xml());

	mOut("closing root element:\n");
	wtr.end();

	std::cout &lt;&lt; "\n\n  writing completed XML";
	std::cout &lt;&lt; "\n -----------------------\n";
	std::cout &lt;&lt; wtr.xml();

	mOut("\n  writing XML to file \"Test.xml\":");
	std::ofstream out("test.xml");
	if (out.good())
<details><summary>	{</summary>
		out &lt;&lt; wtr.xml().c_str();
		out.close();
</details>	}
	std::cout &lt;&lt; std::endl;

	mOut("creating composite element:");
	XmlWriter cwtr, bcwtr1, bcwtr2;
	std::string temp =
		bcwtr1.element("child1", "child1's body")
		.element("child2", "child2's body").xml();
	std::cout &lt;&lt; "\n  " &lt;&lt; bcwtr1.xml();
	bcwtr1.clear();

	std::cout &lt;&lt; "\n  " &lt;&lt;
		cwtr.start("parent")
		.addBody(bcwtr1.element("child1", "child1's body").xml())
		.addBody(bcwtr2.element("child2", "body2").xml())
		.end().xml();
	std::cout &lt;&lt; "\n\n";
</details>}
#endif
</pre></body></html>