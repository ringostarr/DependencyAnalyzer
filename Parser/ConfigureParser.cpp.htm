<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.cpp-----!>
<!-------Published on :04:04:2017 15:35:25-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\itokcollection.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\itokcollection.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////
//  ConfigureParser.cpp - builds and configures parsers            //
//  ver 3.2                                                        //
//                                                                 //
//  Lanaguage:     Visual C++ 2005                                 //
//  Platform:      Dell Dimension 9150, Windows XP SP2             //
//  Application:   Prototype for CSE687 Pr1, Sp06                  //
//  Author:        Jim Fawcett, CST 2-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;fstream&gt;
#include "Parser.h"
#include "../SemiExp/SemiExp.h"
#include "../Tokenizer.h/Tokenizer.h"
#include "ActionsAndRules.h"
#include "ConfigureParser.h"

using namespace CodeAnalysis;
using namespace Scanner;

//----&lt; destructor releases all parts &gt;------------------------------

ConfigParseForCodeAnal::~ConfigParseForCodeAnal()
<details><summary>{</summary>
	// when Builder goes out of scope, everything must be deallocated

	delete pHandleBeginScope;
	delete pBeginScope;
	delete pHandleEndScope;
	delete pEndScope;
	delete pHandlePreprocStatement;
	delete pPreprocStatement;
	delete pHandleClassDefinition;
	delete pClassDefinition;
	delete pHandleStructDefinition;
	delete pStructDefinition;
	//delete pPrintFunction;
	delete pHandleCppFunctionDefinition;
	delete pCppFunctionDefinition;
	delete pHandleCSharpFunctionDefinition;
	delete pCSharpFunctionDefinition;
	delete pCppDeclaration;
	delete pHandleCppDeclaration;
	delete pCSharpDeclaration;
	delete pHandleCSharpDeclaration;
	delete pCppExecutable;
	delete pHandleCppExecutable;
	delete pCSharpExecutable;
	delete pHandleCSharpExecutable;
	delete pDefault;
	delete pHandleDefault;
	delete pRepo;
	delete pParser;
	delete pSemi;
	delete pToker;
	if (pIn != nullptr)
		pIn-&gt;close();
	delete pIn;
</details>}
//----&lt; attach toker to a file stream or stringstream &gt;------------

bool ConfigParseForCodeAnal::Attach(const std::string& name, bool isFile)
<details><summary>{</summary>
	if (pToker == 0)
		return false;
	pIn = new std::ifstream(name);
	if (!pIn-&gt;good())
		return false;

	// check for Byte Order Mark (BOM)
	char a, b, c;
	a = pIn-&gt;get();
	b = pIn-&gt;get();
	c = pIn-&gt;get();
	if (a != (char)0xEF || b != (char)0xBB || c != (char)0xBF)
		pIn-&gt;seekg(0);

	if (!pIn-&gt;good())
<details><summary>	{</summary>
		// empty file, but openable, so return true, avoids error message
		return true;
</details>	}
	return pToker-&gt;attach(pIn);
</details>}
//----&lt; Here's where all the parts get assembled &gt;-----------------

Parser* ConfigParseForCodeAnal::Build()
<details><summary>{</summary>
	try
<details><summary>	{</summary>
		// add Parser's main parts

		pToker = new Toker;
		pToker-&gt;returnComments(false);
		pSemi = new SemiExp(pToker);
		pParser = new Parser(pSemi);
		pRepo = new Repository(pToker);

		// configure to manage scope
		// these must come first - they return true on match
		// so rule checking continues

		pBeginScope = new BeginScope();
		pHandleBeginScope = new HandleBeginScope(pRepo);
		pBeginScope-&gt;addAction(pHandleBeginScope);
		pParser-&gt;addRule(pBeginScope);

		pEndScope = new EndScope();
		pHandleEndScope = new HandleEndScope(pRepo);
		pEndScope-&gt;addAction(pHandleEndScope);
		pParser-&gt;addRule(pEndScope);

		// configure to detect and act on function definitions
		// these will stop further rule checking by returning false

		pPreprocStatement = new PreprocStatement;
		pHandlePreprocStatement = new HandlePreprocStatement(pRepo);
		pPreprocStatement-&gt;addAction(pHandlePreprocStatement);
		pParser-&gt;addRule(pPreprocStatement);

		pNamespaceDefinition = new NamespaceDefinition;
		pHandleNamespaceDefinition = new HandleNamespaceDefinition(pRepo);
		pNamespaceDefinition-&gt;addAction(pHandleNamespaceDefinition);
		pParser-&gt;addRule(pNamespaceDefinition);

		pClassDefinition = new ClassDefinition;
		pHandleClassDefinition = new HandleClassDefinition(pRepo);
		pClassDefinition-&gt;addAction(pHandleClassDefinition);
		pParser-&gt;addRule(pClassDefinition);

		pStructDefinition = new StructDefinition;
		pHandleStructDefinition = new HandleStructDefinition(pRepo);
		pStructDefinition-&gt;addAction(pHandleStructDefinition);
		pParser-&gt;addRule(pStructDefinition);

		pCppFunctionDefinition = new CppFunctionDefinition;
		pHandleCppFunctionDefinition = new HandleCppFunctionDefinition(pRepo);  // no action
		pCppFunctionDefinition-&gt;addAction(pHandleCppFunctionDefinition);
		pParser-&gt;addRule(pCppFunctionDefinition);

		pCSharpFunctionDefinition = new CSharpFunctionDefinition;
		pHandleCSharpFunctionDefinition = new HandleCSharpFunctionDefinition(pRepo);  // no action
		pCSharpFunctionDefinition-&gt;addAction(pHandleCSharpFunctionDefinition);
		pParser-&gt;addRule(pCSharpFunctionDefinition);

		// configure to detect and act on declarations and Executables

		pControlDefinition = new ControlDefinition;
		pHandleControlDefinition = new HandleControlDefinition(pRepo);
		pControlDefinition-&gt;addAction(pHandleControlDefinition);
		pParser-&gt;addRule(pControlDefinition);

		pCppDeclaration = new CppDeclaration;
		pHandleCppDeclaration = new HandleCppDeclaration(pRepo);
		pCppDeclaration-&gt;addAction(pHandleCppDeclaration);
		pParser-&gt;addRule(pCppDeclaration);

		pCSharpDeclaration = new CSharpDeclaration;
		pHandleCSharpDeclaration = new HandleCSharpDeclaration(pRepo);
		pCSharpDeclaration-&gt;addAction(pHandleCSharpDeclaration);
		pParser-&gt;addRule(pCSharpDeclaration);

		pCppExecutable = new CppExecutable;
		pHandleCppExecutable = new HandleCppExecutable(pRepo);
		pCppExecutable-&gt;addAction(pHandleCppExecutable);
		pParser-&gt;addRule(pCppExecutable);

		pCSharpExecutable = new CSharpExecutable;
		pHandleCSharpExecutable = new HandleCSharpExecutable(pRepo);
		pCSharpExecutable-&gt;addAction(pHandleCSharpExecutable);
		pParser-&gt;addRule(pCSharpExecutable);

		pDefault = new Default;
		pHandleDefault = new HandleDefault(pRepo);
		pDefault-&gt;addAction(pHandleDefault);
		pParser-&gt;addRule(pDefault);

		return pParser;
</details>	}
	catch (std::exception& ex)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
		return 0;
</details>	}
</details>}

#ifdef TEST_CONFIGUREPARSER

#include &lt;queue&gt;
#include &lt;string&gt;

int main(int argc, char* argv[])
<details><summary>{</summary>
	std::cout &lt;&lt; "\n  Testing ConfigureParser module\n "
		&lt;&lt; std::string(32, '=') &lt;&lt; std::endl;

	// collecting tokens from files, named on the command line

	if (argc &lt; 2)
<details><summary>	{</summary>
		std::cout
			&lt;&lt; "\n  please enter name of file to process on command line\n\n";
		return 1;
</details>	}

	for (int i = 1; i&lt;argc; ++i)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];
		std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]), '-');

		ConfigParseForCodeAnal configure;
		Parser* pParser = configure.Build();
		try
<details><summary>		{</summary>
			if (pParser)
<details><summary>			{</summary>
				if (!configure.Attach(argv[i]))
<details><summary>				{</summary>
					std::cout &lt;&lt; "\n  could not open file " &lt;&lt; argv[i] &lt;&lt; std::endl;
					continue;
</details>				}
</details>			}
			else
<details><summary>			{</summary>
				std::cout &lt;&lt; "\n\n  Parser not built\n\n";
				return 1;
</details>			}
			// now that parser is built, use it

			while (pParser-&gt;next())
				pParser-&gt;parse();
			std::cout &lt;&lt; "\n\n";
</details>		}
		catch (std::exception& ex)
<details><summary>		{</summary>
			std::cout &lt;&lt; "\n\n    " &lt;&lt; ex.what() &lt;&lt; "\n\n";
</details>		}
		std::cout &lt;&lt; "\n\n";
</details>	}
</details>}

#endif
</pre></body></html>