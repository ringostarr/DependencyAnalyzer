<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.cpp-----!>
<!-------Published on :04:04:2017 15:36:07-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlDocument.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlDocument.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\xmlElementParts.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\xmlElementParts.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlDocument.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlDocument.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp</a><br> </div></hr><pre>///////////////////////////////////////////////////////////////////
// XmlParser.cpp - build XML parse tree                          //
// ver 1.3                                                       //
// Application: Support for XmlDocument, Summer 2015             //
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   //
// Author:      Jim Fawcett, CST 4-187, 443-3948                 //
//              jfawcett@twcny.rr.com                            //
///////////////////////////////////////////////////////////////////

#include "XmlParser.h"
#include "xmlElementParts.h"
#include "XmlDocument.h"
#include "XmlElement.h"
#include "Tokenizer.h"
#include &lt;stack&gt;
#include &lt;string&gt;
#include &lt;cctype&gt;
#include &lt;locale&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include "../Utilities/Utilities.h"

using namespace XmlProcessing;

//----&lt; read text file contents into string &gt;--------------------------------

std::string XmlParser::textFileToString(const std::string& fileName)
<details><summary>{</summary>
	std::ifstream in(fileName);
	if (!in.good())
		throw(std::exception(("can't open source file " + fileName).c_str()));
	std::ostringstream out;
	out &lt;&lt; in.rdbuf();
	return std::move(out.str());
</details>}
//----&lt; remove non-essential whitespace from XML string &gt;--------------------

void XmlParser::compress(std::string& srcStr)
<details><summary>{</summary>
	std::locale loc("");
	enum state_ { inTag, inText, outSide } state = outSide;
	std::string::iterator src, dst;
	src = dst = srcStr.begin();

	// state machine to process text string

	for (src = srcStr.begin(); src != srcStr.end(); ++src)
<details><summary>	{</summary>
		switch (state)
<details><summary>		{</summary>
		case outSide:
			if (!isspace(*src, loc))  // efficiently remove whitespace
<details><summary>			{</summary>
				*dst++ = *src;
				state = inTag;
</details>			}
			break;
		case inTag:
			*dst++ = *src;
			if ((src + 1) != srcStr.end() && *src == '&gt;' && *(src + 1) != '&lt;')
<details><summary>			{</summary>
				state = inText;
</details>			}
			break;
		case inText:
			if (*src == '&lt;')
<details><summary>			{</summary>
				*dst++ = *src;
				state = inTag;
</details>			}
			else if (!(*(dst - 1) == '&gt;' && isspace(*src, loc)))
<details><summary>			{</summary>
				*dst++ = *src;
</details>			}
			break;
</details>		}
</details>	}
	srcStr.erase(dst, srcStr.end());
</details>}
//----&lt; wrap text elements in quotes so they become one token &gt;--------------

std::string XmlParser::enquoteText(const std::string& src)
<details><summary>{</summary>
	std::string temp;
	temp.push_back(src[0]);
	for (size_t i = 1; i &lt; src.size(); ++i)
<details><summary>	{</summary>
		temp.push_back(src[i]);
		if (src[i] == '&gt;' && src[i + 1] != '&lt;')
			if (i + 1 &lt; src.size())  // don't quote end
				temp.push_back('\"');
		if (src[i + 1] == '&lt;' && src[i] != '&gt;')
			temp.push_back('\"');
</details>	}
	return temp;
</details>}
//----&lt; remove quotes, if any, from text string &gt;----------------------------

std::string XmlParser::dequoteText(const std::string& src)
<details><summary>{</summary>
	std::string temp;
	for (size_t i = 0; i &lt; src.size(); ++i)
		if (src[i] != '\"' && src[i] != '\'')
			temp.push_back(src[i]);
	return temp;
</details>}
//----&lt; initialize XmlParser object with string ready for parsing &gt;----------

XmlParser::XmlParser(const std::string& src, sourceType type) : src_(src)
<details><summary>{</summary>
	if (type == file)
		src_ = textFileToString(src_);
	compress(src_);
	src_ = enquoteText(src_);
	pToker_ = new Toker(src_, false);
	pToker_-&gt;setMode(Toker::xml);
	pXmlParts_ = new XmlParts(pToker_);
</details>}
//----&lt; extract attributes, if any, from XmlParts token collection &gt;---------

void XmlParser::extractAttributes()
<details><summary>{</summary>
	attribs_.clear();
	XmlParts xmlParts = *pXmlParts_;
	for (size_t pos = 0; pos &lt; (size_t)xmlParts.length(); ++pos)
<details><summary>	{</summary>
		if (xmlParts[pos] == "=")
<details><summary>		{</summary>
			auto item = attrib(xmlParts[pos - 1], xmlParts[pos + 1]);
			attribs_.push_back(item);
</details>		}
</details>	}
</details>}
//----&lt; display all attribute name-value pairs in current XmlParts &gt;---------

void XmlParser::showAttributes()
<details><summary>{</summary>
	if (attribs_.size() == 0)
		return;
	for (size_t i = 0; i &lt; attribs_.size(); ++i)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n      " &lt;&lt; attribs_[i].first &lt;&lt; ", " &lt;&lt; attribs_[i].second;
</details>	}
</details>}
//----&lt; factory for XmlDeclaration node &gt;------------------------------------

XmlParser::sPtr XmlParser::createXmlDeclar()
<details><summary>{</summary>
	extractAttributes();
	sPtr pDeclar = makeXmlDeclarElement();
	for (auto item : attribs_)
<details><summary>	{</summary>
		std::string name = item.first;
		std::string value = dequoteText(item.second);
		pDeclar-&gt;addAttrib(name, value);
</details>	}
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    xml declaration";
		showAttributes();
</details>	}
	return pDeclar;
</details>}
//----&lt; factory for Processing Instruction node &gt;----------------------------

XmlParser::sPtr XmlParser::createProcInstr()
<details><summary>{</summary>
	extractAttributes();
	sPtr pProcInstr = makeProcInstrElement("");
	for (auto item : attribs_)
<details><summary>	{</summary>
		std::string name = item.first;
		std::string value = dequoteText(item.second);
		pProcInstr-&gt;addAttrib(name, value);
</details>	}
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    processing instruction";
		showAttributes();
</details>	}
	return pProcInstr;
</details>}
//----&lt; factory for Comment node &gt;-------------------------------------------

XmlParser::sPtr XmlParser::createComment()
<details><summary>{</summary>
	std::string comment;
	XmlParts& xmlParts = *pXmlParts_;
	for (size_t i = 3; i &lt; (size_t)xmlParts.length() - 2; ++i)
<details><summary>	{</summary>
		comment += xmlParts[i];
		if (i &lt; (size_t)xmlParts.length() - 3)
			comment += " ";
</details>	}
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    comment";
		std::cout &lt;&lt; "\n      " &lt;&lt; comment;
</details>	}
	sPtr pComment = makeCommentElement(comment);
	return pComment;
</details>}
//----&lt; factory for Tagged Element node &gt;------------------------------------

XmlParser::sPtr XmlParser::createTaggedElem()
<details><summary>{</summary>
	XmlParts& xmlParts = *pXmlParts_;
	sPtr pTaggedElem = makeTaggedElement(xmlParts[1]);
	extractAttributes();
	for (auto item : attribs_)
<details><summary>	{</summary>
		std::string name = item.first;
		std::string value = dequoteText(item.second);
		pTaggedElem-&gt;addAttrib(name, value);
</details>	}
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    tagged element " &lt;&lt; "\"" &lt;&lt; xmlParts[1] &lt;&lt; "\"";
		showAttributes();
</details>	}
	return pTaggedElem;
</details>}
//----&lt; factory for Text Element node &gt;--------------------------------------

XmlParser::sPtr XmlParser::createTextElem()
<details><summary>{</summary>
	XmlParts& xmlParts = *pXmlParts_;
	std::string text = dequoteText(xmlParts[0]);
	sPtr pTextElem = makeTextElement(text);
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    Text Element";
</details>	}
	return pTextElem;
</details>}
//----&lt; show end element parts &gt;---------------------------------------------

void XmlParser::processEndElem()
<details><summary>{</summary>
	if (verbose_)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; pXmlParts_-&gt;show();
		std::cout &lt;&lt; "\n    end element";
</details>	}
</details>}
//----&lt; parse markup and add to XML parse tree &gt;-----------------------------

void XmlParser::processMarkup(ElemStack& elemStack)
<details><summary>{</summary>
	XmlParts& xmlParts = *pXmlParts_;
	if (xmlParts[1] == "?")
<details><summary>	{</summary>
		if (xmlParts[2] == "xml")
<details><summary>		{</summary>
			sPtr pDeclar = createXmlDeclar();
			elemStack.top()-&gt;addChild(pDeclar);
</details>		}
		else
<details><summary>		{</summary>
			sPtr pProcInstr = createProcInstr();
			elemStack.top()-&gt;addChild(pProcInstr);
</details>		}
		if (verbose_) std::cout &lt;&lt; "\n";
		return;
</details>	}
	if (xmlParts[1] == "!")
<details><summary>	{</summary>
		sPtr pComment = createComment();
		elemStack.top()-&gt;addChild(pComment);
		if (verbose_) std::cout &lt;&lt; "\n";
		return;
</details>	}
	if (xmlParts[1] == "/")
<details><summary>	{</summary>
		processEndElem();
		elemStack.pop();
</details>	}
	else
<details><summary>	{</summary>
		sPtr pTaggedElem = createTaggedElem();
		elemStack.top()-&gt;addChild(pTaggedElem);
		elemStack.push(pTaggedElem);
</details>	}
	if (verbose_) std::cout &lt;&lt; "\n";
	return;
</details>}
//----&lt; add text to XML parse tree &gt;-----------------------------------------

void XmlParser::processText(ElemStack& elemStack)
<details><summary>{</summary>
	sPtr pTextElem = createTextElem();
	elemStack.top()-&gt;addChild(pTextElem);
	if (verbose_) std::cout &lt;&lt; "\n";
</details>}
//----&lt; build XmlDocument from XmlParts &gt;------------------------------------

XmlDocument* XmlParser::buildDocument()
<details><summary>{</summary>
	XmlDocument* pDoc = new XmlDocument(makeDocElement());
	using sPtr = std::shared_ptr &lt; AbstractXmlElement &gt;;
	sPtr pDocElem = pDoc-&gt;docElement();

	std::stack &lt;sPtr&gt; elemStack_;
	elemStack_.push(pDocElem);

	std::locale loc;
	XmlParts& xmlParts = *pXmlParts_;
	while (xmlParts.get())
<details><summary>	{</summary>
		if (xmlParts[0] == "&lt;")
<details><summary>		{</summary>
			processMarkup(elemStack_);
			continue;
</details>		}
		if (xmlParts[0][0] == '\"' || isalnum(xmlParts[0][0]) || isspace(xmlParts[0][0], loc))
<details><summary>		{</summary>
			processText(elemStack_);
			continue;
</details>		}
		throw(std::exception("ill-formed XML"));
</details>	}
	if (verbose_) std::cout &lt;&lt; "\n";
	return pDoc;
</details>}

#ifdef TEST_XMLPARSER

using namespace::Utilities;
using Utils = StringHelper;

int main()
<details><summary>{</summary>
	Utils::Title("Testing XmlParser");
	putline();
	std::string src = "../XmlElementParts/LectureNote.xml";
	XmlParser parser(src);
	parser.verbose();
	Utils::title("Compressed form of formatted XML:");
	std::cout &lt;&lt; "\n" &lt;&lt; src &lt;&lt; "\n";
	Utils::title("Parsing compressed XML:");
	XmlDocument* pDoc = parser.buildDocument();
	Utils::title("Resulting XML Parse Tree:");
	std::cout &lt;&lt; "\n" &lt;&lt; pDoc-&gt;toString();
	std::cout &lt;&lt; "\n\n";
</details>}

#endif

</pre></body></html>