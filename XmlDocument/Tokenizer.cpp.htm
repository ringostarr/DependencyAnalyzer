<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.cpp-----!>
<!-------Published on :04:04:2017 15:35:52-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////
//  Tokenizer.cpp - Reads words from a file                        //
//  ver 1.9                                                        //
//                                                                 //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Dell Precision T7400, Vista Ultimate SP1        //
//  Application:   Prototype for CSE687 Pr1, Sp09                  //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;cctype&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;assert.h&gt;
#include "Tokenizer.h"

//----&lt; constructor may be called with no argument &gt;-----------

Toker::Toker(const std::string& src, bool isFile)
	: prevprevChar(0), prevChar(0), currChar(0), nextChar(0),
	doReturnComments(false), numLines(0), braceCount(0), pIn(0),
	_state(default_state)
<details><summary>{</summary>
	if (src.length() &gt; 0)
<details><summary>	{</summary>
		if (!attach(src, isFile))
<details><summary>		{</summary>
			std::string temp = std::string("can't open ") + src;
			throw std::exception(temp.c_str());
</details>		}
</details>	}
	scTok = "()[]{};.\n";
	if (_mode == xml)
		scTok = "&lt;&gt;!" + scTok;
</details>}
//----&lt; destructor &gt;-------------------------------------------

Toker::~Toker()
<details><summary>{</summary>
	if (pIn)
<details><summary>	{</summary>
		pIn-&gt;clear();
		std::ifstream* pFs = dynamic_cast&lt;std::ifstream*&gt;(pIn);
		if (pFs)
<details><summary>		{</summary>
			pFs-&gt;close();
</details>		}
		delete pIn;
</details>	}
</details>}
//----&lt; set mode of tokenizing, e.g., code or xml &gt;------------

void Toker::setMode(Toker::mode md)
<details><summary>{</summary>
	_mode = md;
	scTok = "()[]{};.\n";
	if (_mode == xml)
		scTok = "&lt;&gt;!" + scTok;
</details>}
//----&lt; set mode of tokenizing, e.g., code or xml &gt;------------

void Toker::setSingleCharTokens(std::string tokChars)
<details><summary>{</summary>
	_mode = custom;
	scTok = tokChars;
</details>}
//----&lt; attach tokenizer to a source file or string &gt;----------

bool Toker::attach(const std::string& name, bool srcIsFile)
<details><summary>{</summary>
	if (pIn && srcIsFile)
<details><summary>	{</summary>
		pIn-&gt;clear();
		std::ifstream* pFs = dynamic_cast&lt;std::ifstream*&gt;(pIn);
		if (pFs)
<details><summary>		{</summary>
			pFs-&gt;close();
</details>		}
		delete pIn;
</details>	}
	if (srcIsFile)
		pIn = new std::ifstream(name.c_str());
	else
		pIn = new std::istringstream(name.c_str());
	return pIn-&gt;good();
</details>}
//----&lt; peek function that works with multiple putbacks &gt;------

int Toker::peek()
<details><summary>{</summary>
	if (putbacks.size() &gt; 0)
		return putbacks[putbacks.size() - 1];
	else
		return pIn-&gt;peek();

</details>}
//----&lt; multiple putBack that won't break peek &gt;---------------

void Toker::putback(int ch)
<details><summary>{</summary>
	putbacks.push_back(ch);
	nextChar = ch;
	currChar = prevChar;
	prevChar = prevprevChar;
</details>}
//----&lt; get consistent with peek and putback &gt;-----------------

int Toker::get()
<details><summary>{</summary>
	if (putbacks.size() &gt; 0)
<details><summary>	{</summary>
		char ch = putbacks.front();
		putbacks.pop_back();
		return ch;
</details>	}
	return pIn-&gt;get();
</details>}
//
//----&lt; extract character from attached stream &gt;---------------

bool Toker::getChar()
<details><summary>{</summary>
	char oldNext = nextChar;
	prevprevChar = prevChar;
	prevChar = currChar;
	currChar = this-&gt;get();
	nextChar = this-&gt;peek();
	_ASSERT(currChar == oldNext || oldNext == 0);
	if (currChar == '\n')
		++numLines;
<details><summary>	if (currChar == '{' && _state == default_state)</summary>
		++braceCount;
</details>	if (currChar == '}' && _state == default_state)
		--braceCount;
	return !pIn-&gt;eof();
</details>}
//----&lt; is this char a single char token? &gt;--------------------

bool Toker::isSingleCharTok(char ch)
<details><summary>{</summary>
	if (scTok.find(ch) &lt; scTok.length())
		return true;
	return false;
</details>}
//----&lt; remove contiguous white space except for newline &gt;-----

void Toker::stripWhiteSpace()
<details><summary>{</summary>
	if (nextChar == '\n')
		return;
	while (isspace(nextChar) && nextChar != '\n')
<details><summary>	{</summary>
		getChar();
</details>	}
</details>}
//----&lt; is this an indentifier character? &gt;--------------------

bool Toker::isIdentifierChar(char ch)
<details><summary>{</summary>
	if (isalpha(ch) || ch == '_' || isdigit(ch))
		return true;
	return false;
</details>}
//----&lt; is this the end of a token? &gt;--------------------------

bool Toker::isTokEnd()
<details><summary>{</summary>
	if (isspace(nextChar))
		return true;
	if (isSingleCharTok(nextChar) || isSingleCharTok(currChar))
		return true;
	if (isIdentifierChar(currChar) && !isIdentifierChar(nextChar))
		return true;
	if (!isIdentifierChar(currChar) && isIdentifierChar(nextChar))
		return true;
	if (isFileEnd())
		return true;
	return false;
</details>}
//----&lt; is this the beginning of a comment? &gt;------------------

bool Toker::isBeginComment()
<details><summary>{</summary>
	if (prevChar != '\\' && currChar == '/' && nextChar == '*')
<details><summary>	{</summary>
		aCppComment = false;
		return true;
</details>	}
	if (prevChar != '\\' && currChar == '/' && nextChar == '/')
<details><summary>	{</summary>
		aCppComment = true;
		return true;
</details>	}
	return false;
</details>}
//----&lt; is this the end of a comment? &gt;------------------------

bool Toker::isEndComment()
<details><summary>{</summary>
	if (aCppComment && currChar != '\\' && nextChar == '\n')
		return true;
	if (!aCppComment && prevChar != '\\' && currChar == '*' && nextChar == '/')
		return true;
	return false;
</details>}
//----&lt; return comment as a token &gt;----------------------------

std::string Toker::eatComment()
<details><summary>{</summary>
	_state = comment_state;
	std::string tok(1, currChar);
	while (!isEndComment() && pIn-&gt;good())
<details><summary>	{</summary>
		getChar();
		tok.append(1, currChar);
</details>	}

	if (!aCppComment)
<details><summary>	{</summary>
		getChar();
		tok.append(1, currChar);
</details>	}
	_state = default_state;
	return tok;
</details>}
//----&lt; is this the beginning of a quote? &gt;--------------------

bool Toker::isBeginQuote()
<details><summary>{</summary>
	if (prevChar != '\\' && currChar == '\'')
<details><summary>	{</summary>
		aSingleQuote = true;
		return true;
</details>	}
	if (prevChar != '\\' && currChar == '\"')
<details><summary>	{</summary>
		aSingleQuote = false;
		return true;
</details>	}
	return false;
</details>}
//----&lt; is this the end of quote? &gt;----------------------------

bool Toker::isEndQuote()
<details><summary>{</summary>
	if (prevChar == '\\' || currChar != '\\')
<details><summary>	{</summary>
		if (aSingleQuote && nextChar == '\'')
			return true;
		if (!aSingleQuote && nextChar == '\"')
			return true;
</details>	}
	return false;
</details>}
//----&lt; return single or double quote as token &gt;---------------

std::string Toker::eatQuote()
<details><summary>{</summary>
	_state = quote_state;
	std::string tok(1, currChar);
	while (!isEndQuote())
<details><summary>	{</summary>
		if (!pIn-&gt;good())
			throw std::exception("missing end of quote");
		getChar();
		tok.append(1, currChar);
</details>	}
	getChar();
	tok.append(1, currChar);
	_state = default_state;
	return tok;
</details>}
//----&lt; read token from attached file &gt;------------------------

std::string Toker::getTok()
<details><summary>{</summary>
	std::string tok = "";
	stripWhiteSpace();
	if (isSingleCharTok(nextChar))
<details><summary>	{</summary>
		getChar();
		tok.append(1, currChar);
		return tok;
</details>	}
	do
<details><summary>	{</summary>
		if (isFileEnd())
			return tok;

		getChar();
		if (isBeginComment())
<details><summary>		{</summary>
			if (tok.length() &gt; 0)
<details><summary>			{</summary>
				this-&gt;putback(currChar);
				return tok;
</details>			}
			tok = eatComment();
			if (doReturnComments)
				return tok;
			else
<details><summary>			{</summary>
				tok = "";
				continue;
</details>			}
</details>		}
		if (isBeginQuote())
<details><summary>		{</summary>
			if (tok.length() &gt; 0)
<details><summary>			{</summary>
				this-&gt;putback(currChar);
				return tok;
</details>			}
			tok = eatQuote();
			return tok;
</details>		}
		if (!isspace(currChar))
			tok.append(1, currChar);
</details>	} while (!isTokEnd() || tok.length() == 0);
	return tok;
</details>}
//----&lt; test stub &gt;--------------------------------------------

#ifdef TEST_TOKENIZER

int main(int argc, char* argv[])
<details><summary>{</summary>
	std::cout &lt;&lt; "\n  Testing Tokenizer class\n "
		&lt;&lt; std::string(25, '=') &lt;&lt; std::endl;
	std::cout
		&lt;&lt; "\n  Note that comments and quotes are returned as single tokens\n\n";

	// collecting tokens from a string

	Toker t_fromStr("tokens from a string: -&gt; int x; /* a comment */", false);
	std::string tok;
	do
<details><summary>	{</summary>
		tok = t_fromStr.getTok();
		std::cout &lt;&lt; "  " &lt;&lt; tok;
</details>	} while (tok != "");
	std::cout &lt;&lt; "\n\n";

	// collecting tokens from files, named on the command line

	if (argc &lt; 2)
<details><summary>	{</summary>
		std::cout
			&lt;&lt; "\n  please enter name of file to process on command line\n\n";
		return 1;
</details>	}

	for (int i = 1; i&lt;argc; ++i)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];
		std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]), '-') &lt;&lt; "\n";

		try
<details><summary>		{</summary>
			Toker t;
			t.setMode(Toker::xml);        // comment out to show tokenizing for code
										  //    t.setSingleCharTokens("&lt;&gt;");  // will return same results as above for XML

			if (!t.attach(argv[i]))
<details><summary>			{</summary>
				std::cout &lt;&lt; "\n    can't open file " &lt;&lt; argv[i] &lt;&lt; "\n\n";
				continue;
</details>			}
			t.returnComments();  // remove this statement to discard comment tokens
			std::string temp;
			do
<details><summary>			{</summary>
				temp = t.getTok();
				std::cout &lt;&lt; "  ln: " &lt;&lt; t.lines() &lt;&lt; ", br lev: "
					&lt;&lt; t.braceLevel() &lt;&lt; ", tok size: " &lt;&lt; std::setw(3) &lt;&lt; temp.length() &lt;&lt; " -- ";
				if (temp != "\n")
					std::cout &lt;&lt; temp &lt;&lt; std::endl;
				else
					std::cout &lt;&lt; "newline\n";
</details>			} while (temp != "");
</details>		}
		catch (std::exception& ex)
<details><summary>		{</summary>
			std::cout &lt;&lt; "  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
</details>		}
</details>	}
</details>}

#endif
</pre></body></html>