<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\xmlElementParts.cpp-----!>
<!-------Published on :04:04:2017 15:36:05-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\xmlElementParts.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\xmlElementParts.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////
//  XmlElementParts.cpp - Collects tokens for XML analysis         //
//  ver 1.3                                                        //
//                                                                 //
//  Language:      Visual C++ 2008, SP1                            //
//  Platform:      Dell Precision T7400, Vista Ultimate SP1        //
//  Application:   Prototype for CSE687 Pr1, Sp09                  //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;algorithm&gt;
#include "XmlElementParts.h"

//----&lt; construct XmlParts instance &gt;---------------------------

XmlParts::XmlParts(Toker* pTokr) : pToker(pTokr), Verbose(false)
<details><summary>{</summary>
</details>}
//----&lt; destructor &gt;-------------------------------------------

XmlParts::~XmlParts()
<details><summary>{</summary>
</details>}
//----&lt; is this a terminating token? &gt;-------------------------

bool XmlParts::isTerminator(std::string tok)
<details><summary>{</summary>
	if (tok.length() == 0)
		return false;
	if (tok == "&gt;")
		return true;
	return false;
</details>}
//
//----&lt; collect an XmlElementParts sequence &gt;------------------

bool XmlParts::get()
<details><summary>{</summary>
	toks.clear();
	std::string tok;
	do
<details><summary>	{</summary>
		if (pToker-&gt;isFileEnd())
<details><summary>		{</summary>
			if (length() &gt; 0)
				return true;
			return false;
</details>		}
		tok = pToker-&gt;getTok();
		if (Verbose)
<details><summary>		{</summary>
			if (tok != "\n")
				std::cout &lt;&lt; "\n--tok=" &lt;&lt; tok &lt;&lt; std::endl;
			else
				std::cout &lt;&lt; "\n--tok=newline\n";
</details>		}
		if (toks.size() &gt; 0 && tok == "&lt;")
<details><summary>		{</summary>
			pToker-&gt;putback('&lt;');
			break;
</details>		}
		if (tok != "\n")
			toks.push_back(tok);
</details>	} while (!isTerminator(tok));
	return true;
</details>}
//----&lt; index operator &gt;---------------------------------------

std::string& XmlParts::operator[](int n)
<details><summary>{</summary>
	if (n &lt; 0 || toks.size() &lt;= (size_t)n)
		throw std::exception("XmlParts index out of range");
	return toks[n];
</details>}
//----&lt; collect semi-expression as space-seperated string &gt;----

std::string XmlParts::show()
<details><summary>{</summary>
	if (toks.size() == 0)
		return "";
	std::string temp(" ");
	for (size_t i = 0; i&lt;toks.size(); ++i)
		if (toks[i] != "\n")
			temp.append(" ").append(toks[i]);
	return temp;
</details>}
//
//----&lt; is tok found in XmlElementParts? &gt;---------------------

int XmlParts::find(const std::string& tok)
<details><summary>{</summary>
	for (int i = 0; i&lt;length(); ++i)
		if (tok == toks[i])
			return i;
	return length();
</details>}
//----&lt; remove tok if found in semi-expression &gt;---------------

bool XmlParts::remove(const std::string& tok)
<details><summary>{</summary>
	std::vector&lt;std::string&gt;::iterator it;
	it = std::find(toks.begin(), toks.end(), tok);
	if (it != toks.end())
<details><summary>	{</summary>
		toks.erase(it);
		return true;
</details>	}
	return false;
</details>}
//----&lt; remove leading newlines &gt;------------------------------

void XmlParts::trimFront()
<details><summary>{</summary>
	while (toks.size() &gt; 0 && toks[0] == "\n")
		remove("\n");
</details>}
//----&lt; make tokens lowercase &gt;--------------------------------

void XmlParts::toLower()
<details><summary>{</summary>
	for (int i = 0; i&lt;length(); ++i)
<details><summary>	{</summary>
		for (size_t j = 0; j&lt;(*this)[i].length(); ++j)
<details><summary>		{</summary>
			(*this)[i][j] = tolower((*this)[i][j]);
</details>		}
</details>	}
</details>}
//
//----&lt; test stub &gt;--------------------------------------------

#ifdef TEST_XMLELEMENTPARTS

int main(int argc, char* argv[])
<details><summary>{</summary>
	std::cout &lt;&lt; "\n  Testing XmlParts class\n "
		&lt;&lt; std::string(23, '=') &lt;&lt; std::endl;
	std::cout
		&lt;&lt; "\n  Note that quotes are returned as single tokens\n\n";

	if (argc &lt; 2)
<details><summary>	{</summary>
		std::cout
			&lt;&lt; "\n  please enter name of file to process on command line\n\n";
		return 1;
</details>	}

	for (int i = 1; i&lt;argc; ++i)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];
		std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]), '-') &lt;&lt; "\n\n";
		try
<details><summary>		{</summary>
			Toker toker(argv[i]);
			toker.setMode(Toker::xml);
			XmlParts parts(&toker);
			//parts.verbose();                 // uncomment to show token details
			while (parts.get())
				std::cout &lt;&lt; parts.show().c_str() &lt;&lt; std::endl;
			std::cout &lt;&lt; "\n\n";
</details>		}
		catch (std::exception ex)
<details><summary>		{</summary>
			std::cout &lt;&lt; "\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
</details>		}
</details>	}
</details>}

#endif
</pre></body></html>