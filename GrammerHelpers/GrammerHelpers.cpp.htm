<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp-----!>
<!-------Published on :04:04:2017 15:34:58-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\itokcollection.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\itokcollection.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Tokenizer.h\Tokenizer.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\ITokCollection.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\ITokCollection.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Cpp11-BlockingQueue\Cpp11-BlockingQueue.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Cpp11-BlockingQueue\Cpp11-BlockingQueue.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\SemiExp\SemiExp.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////////
// GrammarHelpers.cpp - Functions providing base grammatical analyses  //
// ver 1.2                                                             //
// Language:    C++, Visual Studio 2015                                //
// Application: Support for Parsing, CSE687 - Object Oriented Design   //
// Author:      Jim Fawcett, Syracuse University, CST 4-187            //
//              jfawcett@twcny.rr.com                                  //
/////////////////////////////////////////////////////////////////////////

#include "GrammerHelpers.h"
#include "../SemiExp/SemiExp.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
//#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;sstream&gt;

using namespace CodeAnalysis;

//----&lt; is tok a control keyword for either C++ or C# ? &gt;------------

bool GrammarHelper::isControlKeyWord(const std::string& tok)
<details><summary>{</summary>
	const static size_t numKeys = 9;
	const static std::string keys[numKeys]
		= { "for", "foreach", "do", "while", "switch", "if", "else", "try", "catch" };

	for (int i = 0; i &lt; numKeys; ++i)
<details><summary>	{</summary>
		if (tok == keys[i])
			return true;
</details>	}
	return false;
</details>}
//----&lt; does SemiExp contain at least one control keyword ? &gt;--------

bool GrammarHelper::hasControlKeyWord(const Scanner::ITokCollection& se)
<details><summary>{</summary>
	for (size_t i = 0; i &lt; se.length(); ++i)
<details><summary>	{</summary>
		if (GrammarHelper::isControlKeyWord(se[i]))
			return true;
</details>	}
	return false;
</details>}
//----&lt; is semiExp a function defin or declar ? &gt;--------------------

bool GrammarHelper::isFunction(const Scanner::ITokCollection& se)
<details><summary>{</summary>
	size_t len = se.find("(");
	if (0 &lt; len && len &lt; se.length() && !isControlKeyWord(se[len - 1]))
		return true;
	if (len == 0)
<details><summary>	{</summary>
		size_t posEquals = se.find("=");
		if (posEquals &lt; se.length() - 1 && se[posEquals + 1] == "&gt;")
<details><summary>		{</summary>
			// C# lambda
			return true;
</details>		}
</details>	}
	return false;
</details>}
//----&lt; has function and function has at least one argument &gt;--------

bool GrammarHelper::hasArgs(const Scanner::ITokCollection& se)
<details><summary>{</summary>
	if (!isFunction(se))
		return false;

	size_t posOpenParen = se.find("(");
	size_t posCloseParen = se.find(")");
	if (posOpenParen &lt; posCloseParen && posCloseParen &lt; se.length())
<details><summary>	{</summary>
		if (posCloseParen &gt; posOpenParen + 1)
			return true;
</details>	}
	return false;
</details>}
//----&lt; is semiExp a function defin or declar ? &gt;--------------------

bool GrammarHelper::isFunctionDefinition(const Scanner::ITokCollection& se)
<details><summary>{</summary>
<details><summary>	if (se.length() &gt; 0 && se[se.length() - 1] != "{")</summary>
		return false;

	if (isFunction(se))
		return true;

	return false;
</details>}
//----&lt; find last matching token in semiExp &gt;------------------------

size_t GrammarHelper::findLast(const Scanner::ITokCollection& se, const std::string& token)
<details><summary>{</summary>
	size_t endIndex = se.length() - 1;
	for (size_t i = 0; i &lt; se.length(); ++i)
<details><summary>	{</summary>
		std::string debugTok = se[endIndex - i];
		if (se[endIndex - i] == token)
			return endIndex - i;
</details>	}
	return se.length();
</details>}
//----&lt; is tok a type qualifier keyword ? &gt;--------------------------

bool GrammarHelper::isQualifierKeyWord(const std::string& tok)
<details><summary>{</summary>
	const size_t numKeys = 21;            // its declar else executable.
<details><summary>	const static std::string keys[numKeys] = {</summary>
		"const", "extern", "friend", "mutable", "signed", "static", "abstract",
		"typedef", "typename", "unsigned", "volatile", "&", "*", /*"std",*/ /*"::",*/
		"public", "protected", "private", ":", "typename", "typedef", "++", "--"
</details>	};
	for (int i = 0; i &lt; numKeys; ++i)
		if (tok == keys[i])
			return true;
	return false;
</details>}
//----&lt; strip qualifier keywords from semiExp &gt;----------------------

void GrammarHelper::removeQualifiers(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	size_t i = 0;
	while (i &lt; tc.length())
<details><summary>	{</summary>
		if (isQualifierKeyWord(tc[i]))
			tc.remove(i);
		else
			++i;
</details>	}
</details>}
//----&lt; remove calling argument qualifiers after first paren &gt;-------

void GrammarHelper::removeCallingArgQualifiers(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	std::string debug = tc.show();

	size_t begin = tc.find("(");
	size_t end = tc.find(")");
	if (begin == tc.length() || end == tc.length() || begin &gt;= end)
		return;
	size_t i = begin + 1;
	while (true)
<details><summary>	{</summary>
		if (isQualifierKeyWord(tc[i]))
			tc.remove(tc[i]);
		if (tc[i] == ")")
			break;
		++i;
</details>	}
</details>}
//----&lt; is token a scope connector ? &gt;-------------------------------

bool isScopeConnector(const std::string& tok)
<details><summary>{</summary>
	if (tok == "::" || tok == ".")
		return true;
	return false;
</details>}
//----&lt; is first function argument a declaration ? &gt;-----------------

bool GrammarHelper::isFirstArgDeclaration(const Scanner::ITokCollection& tc, const std::string& parentType)
<details><summary>{</summary>
	if (!isFunction(tc))
		return false;  // not a function

	if (parentType == "function")
		return false;  // functions don't declare other functions

	Scanner::SemiExp se;
	se.clone(tc);

	removeCallingArgQualifiers(se);

	size_t posOpenParen = se.find("(");
	size_t posComma = se.find(",");
	size_t posEqual = se.find("=");
	size_t posCloseParen = se.find(")");

	// must have two adjacent terms without connector, e.g., type and name

	size_t posEnd = (posComma &lt; posEqual) ? posComma : posEqual;
	posEnd = (posEnd &lt; posCloseParen) ? posEnd : posCloseParen;

	// Note:
	// - This set of cases works correctly only if name is included in
	//   declaration, but that is not required by either C++ or C#.
	// - An example of the problem is X(tok);  If tok is a
	//   type then this is a constructor function declaration, otherwise
	//   it is a function invocation with named parameter tok.
	// - To fix this we would need to know all defined types, both
	//   those defined by our code and also by all the libraries used.
	// - for most analysis applications we do not need a completely
	//   reliable function declaration detector

	size_t numArgTerms = posEnd - posOpenParen - 1;
	switch (numArgTerms)
<details><summary>	{</summary>
	case 1:
		// must be executable
		return false;
		break;
	case 2:
		// type name
		return true;
		break;
	case 4:
		// namespace :: type name
		return true;
		break;
	default:
		// not an argument declaration
		break;
</details>	}
	return false;
</details>}
//----&lt; is this a function declaration ? &gt;---------------------------

bool GrammarHelper::isFunctionDeclaration(const Scanner::ITokCollection& tc, const std::string& parentType)
<details><summary>{</summary>
	std::string debug = tc.show();

<details><summary>	if (tc.length() == 1)  // ; or {</summary>
		return false;

	if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
		return false;

	if (parentType == "function")
		return false;

	if (!isFunction(tc))
		return false;

	Scanner::SemiExp se;
	se.clone(tc);

	if (isFirstArgDeclaration(se, parentType) || !hasArgs(se))
		return true;

	return false;
</details>}
//----&lt; is this a function invocation ? &gt;----------------------------
/*
*  will return false unless invocation uses first paren in SemiExp
*/
bool GrammarHelper::isFunctionInvocation(const Scanner::ITokCollection& tc, const std::string& parentType)
<details><summary>{</summary>
<details><summary>	if (tc.length() == 1)  // ; or {</summary>
		return false;

	if (parentType != "function")
		return false;

	if (isFunction(tc) && !isFunctionDeclaration(tc, parentType) && !isFunctionDefinition(tc))
		return true;

	return false;
</details>}
//----&lt; has function invocation somewhere in expression ? &gt;----------

bool GrammarHelper::hasFunctionInvocation(const Scanner::ITokCollection& tc, const std::string& parentType)
<details><summary>{</summary>
<details><summary>	if (tc.length() == 1)  // ; or {</summary>
		return false;

<details><summary>	if (tc.length() &gt; 0 && tc[tc.length() - 1] == "{")</summary>
		return false;

	if (parentType != "function")
		return false;

	size_t posParen = tc.find("(");
	Scanner::SemiExp test;
	test.clone(tc, posParen - 1);
	std::string debug = test.show();
	while (true)
<details><summary>	{</summary>
		if (isFunctionInvocation(test, parentType))
			return true;
		posParen = test.find("(", posParen + 1);
		if (posParen == test.length())
			return false;
		Scanner::SemiExp innerTest;
		innerTest.clone(test, posParen - 1);
		test = innerTest;
		std::string debug = test.show();
</details>	}
	return false;
</details>}
//----&lt; is this a data declaration ? &gt;-------------------------------

bool GrammarHelper::isDataDeclaration(const Scanner::ITokCollection& tc)
<details><summary>{</summary>
	std::string debug3 = tc.show();

<details><summary>	if (tc.length() == 1)  // ; or {</summary>
		return false;

	if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
		return false;

	if (tc.length() &gt; 0 && (tc[0] == "~" || tc[0] == "return"))
		return false;

	if (hasControlKeyWord(tc))
		return false;

	if (tc.find("&lt;&lt;") &lt; tc.length() || tc.find("&gt;&gt;") &lt; tc.length())
		return false;

	std::string debug = tc.show();

	Scanner::SemiExp se;
	se.clone(tc);
	condenseTemplateTypes(se);
	removeQualifiers(se);
	removeCppInitializers(se);

	// is this a function declaration ?

	size_t posParen = se.find("(");
	if (posParen &lt; se.length() && (posParen == 2 || posParen == 3))
		return false;

	removeFunctionArgs(se);

	// is stripped tc of the form "type name ;" or "namespace :: type name ;"

	std::string debug2 = se.show();

	if (se.length() == 3)
		return true;
	if (se.length() == 5 && se[1] == "::")
		return true;

	return false;
</details>}
//----&lt; is this an executable statement ? &gt;--------------------------

bool GrammarHelper::isExecutable(const Scanner::ITokCollection& tc, const std::string& parentType)
<details><summary>{</summary>
<details><summary>	if (tc.length() == 1)  // ; or {</summary>
		return false;

	if (isFunctionDefinition(tc))
		return false;
	if (isFunctionDeclaration(tc, parentType))
		return false;
	if (isDataDeclaration(tc))
		return false;
	return true;
</details>}
//----&lt; remove initializers from C++ semiExp &gt;-----------------------

void GrammarHelper::removeCppInitializers(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	std::string debug = tc.show();
	for (size_t i = 0; i &lt; tc.length(); ++i)
<details><summary>	{</summary>
<details><summary>		if (tc[i] == "=" || tc[i] == "{")</summary>
<details><summary>		{</summary>
			size_t j = i;
			while (j &lt; tc.length() && tc[j] != ";")
<details><summary>			{</summary>
				tc.remove(j);
</details>			}
			break;
</details>		}
</details>	}
	if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
		tc.push_back(";");
</details>}
//----&lt; remove initializers from C# semiExp &gt;------------------------

void GrammarHelper::removeCSharpInitializers(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	std::string debug = tc.show();
	for (size_t i = 0; i &lt; tc.length(); ++i)
<details><summary>	{</summary>
		if (tc[i] == "=")
<details><summary>		{</summary>
			size_t j = i;
			while (j &lt; tc.length() && tc[j] != ";")
<details><summary>			{</summary>
				tc.remove(j);
</details>			}
			break;
</details>		}
</details>	}
	if (tc.length() &gt; 0 && tc[tc.length() - 1] != ";")
		tc.push_back(";");
</details>}
//----&lt; remove comments from semiExp &gt;-------------------------------

void GrammarHelper::removeComments(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	size_t i = 0;
	while (true)
<details><summary>	{</summary>
		if (tc.isComment(tc[i]))
			tc.remove(i);
		if (++i == tc.length())
			break;
</details>	}
</details>}
//----&lt; condense template spec to single token &gt;---------------------

void GrammarHelper::condenseTemplateTypes(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	size_t start = tc.find("&lt;");
	size_t end = tc.find("&gt;");
	if (start &gt;= end || start == 0)
		return;
	else
<details><summary>	{</summary>
		if (end == tc.length())
			end = tc.find("&gt;::");
		if (end == tc.length())
			return;
</details>	}
	std::string save = tc[end];
	std::string tok = tc[start - 1];
	for (size_t i = start; i &lt; end + 1; ++i)
<details><summary>	{</summary>
		tok += tc[i];
		if (tc[i] == "typename" || tc[i] == "class")
			tok += " ";
</details>	}
	for (size_t i = start; i &lt; end + 1; ++i)
		tc.remove(start);
	if (save == "&gt;::")
<details><summary>	{</summary>
		tok += tc[start + 1];
		tc.remove(start);
</details>	}
	tc[start - 1] = tok;
	//std::cout &lt;&lt; "\n  -- " &lt;&lt; tc.show();
</details>}
//----&lt; remove function's formal arguments &gt;-------------------------

void GrammarHelper::removeFunctionArgs(Scanner::ITokCollection& tc)
<details><summary>{</summary>
	std::string debug = tc.show();

	size_t start = tc.find("(");
	size_t end = tc.find(")");
	if (start &gt;= end || end == tc.length() || start == 0)
		return;
	if (GrammarHelper::isControlKeyWord(tc[start - 1]))
		return;
	for (size_t i = start; i &lt; end + 1; ++i)
		tc.remove(start);
	//std::cout &lt;&lt; "\n  -- " &lt;&lt; tc.show();
</details>}
//----&lt; show semiExp with Dbug logger &gt;------------------------------

void GrammarHelper::showParse(const std::string& msg, const Scanner::ITokCollection& se)
<details><summary>{</summary>
	using Dbug = Logging::StaticLogger&lt;2&gt;;
	if (Dbug::running())
<details><summary>	{</summary>
		std::ostringstream out;
		out &lt;&lt; "\n  " &lt;&lt; std::left &lt;&lt; std::setw(15) &lt;&lt; msg &lt;&lt; ": ";
		std::string temp = se.show();
		if (temp.size() &gt; 80)
			out &lt;&lt; "\n    ";
		out &lt;&lt; temp;
		Dbug::write(out.str());
</details>	}
</details>}

void GrammarHelper::showParseDemo(const std::string& msg, const Scanner::ITokCollection& se)
<details><summary>{</summary>
	using Demo = Logging::StaticLogger&lt;1&gt;;
	if (Demo::running())
<details><summary>	{</summary>
		std::ostringstream out;
		out &lt;&lt; "\n  " &lt;&lt; std::left &lt;&lt; std::setw(32) &lt;&lt; msg &lt;&lt; ": ";
		std::string temp = se.show();
		if (temp.size() &gt; 80)
			out &lt;&lt; "\n    ";
		out &lt;&lt; temp;
		Demo::write(out.str());
</details>	}
</details>}

#ifdef TEST_GRAMMARHELPERS

#include &lt;vector&gt;
#include &lt;iostream&gt;
#include "../SemiExp/SemiExp.h"
#include "../Utilities/Utilities.h"

using namespace Scanner;
using Token = std::string;
using Toks = std::vector&lt;Token&gt;;

void load(const Toks& toks, SemiExp& se)
<details><summary>{</summary>
	se.clear();
	for (auto item : toks)
		se.push_back(item);
</details>}

std::string showQualifiers(const SemiExp& se)
<details><summary>{</summary>
	std::string temp;
	for (size_t i = 0; i &lt; se.length(); ++i)
		if (GrammarHelper::isQualifierKeyWord(se[i]))
			temp += se[i] + " ";
	return temp;
</details>}

void showPredicate(bool predicate, const std::string& msg)
<details><summary>{</summary>
	if (predicate)
		std::cout &lt;&lt; "\n    " &lt;&lt; msg;
	else
		std::cout &lt;&lt; "\n    not " &lt;&lt; msg;
</details>}

std::string show(const ITokCollection& se)
<details><summary>{</summary>
	std::string temp;
	for (size_t i = 0; i &lt; se.length(); ++i)
		temp += se[i] + " ";
	return temp;
</details>}

void test(const SemiExp& seIn)
<details><summary>{</summary>
	Scanner::SemiExp se;
	se.clone(seIn);

	Utilities::StringHelper::title("Testing GrammarHelpers");
	std::cout &lt;&lt; "\n  " &lt;&lt; show(se);
	se.trim();
	std::cout &lt;&lt; "\n    removing comments:  " &lt;&lt; show(se);
	std::cout &lt;&lt; "\n    index of last \"(\" is " &lt;&lt; GrammarHelper::findLast(seIn, "(");
	std::cout &lt;&lt; "\n    qualifier keywords are: " &lt;&lt; showQualifiers(seIn);

	std::string debug = se.show();
	showPredicate(GrammarHelper::isFunctionDefinition(se), "function definition");

	std::string parentType = "function";
	std::cout &lt;&lt; "\n  parent type = " &lt;&lt; parentType;
	showPredicate(GrammarHelper::isFunctionDeclaration(se, parentType), "function declaration");
	showPredicate(GrammarHelper::isFunctionInvocation(se, parentType), "function invocation");
	showPredicate(GrammarHelper::hasFunctionInvocation(se, parentType), "has function invocation");
	parentType = "class";
	std::cout &lt;&lt; "\n  parent type = " &lt;&lt; parentType;
	showPredicate(GrammarHelper::isFunctionDeclaration(se, parentType), "function declaration");
	showPredicate(GrammarHelper::isFunctionInvocation(se, parentType), "function invocation");
	showPredicate(GrammarHelper::hasFunctionInvocation(se, parentType), "has function invocation");

	showPredicate(GrammarHelper::isDataDeclaration(se), "data declaration");
	showPredicate(GrammarHelper::hasControlKeyWord(se), "found control Keyword");

	SemiExp testSE;
	testSE.clone(seIn);
	GrammarHelper::condenseTemplateTypes(testSE);
	std::cout &lt;&lt; "\n    condensing template types: " &lt;&lt; show(testSE);

	testSE.clone(seIn);
	GrammarHelper::removeQualifiers(testSE);
	std::cout &lt;&lt; "\n    removing qualifiers: " &lt;&lt; show(testSE);

	testSE.clone(seIn);
	GrammarHelper::removeCppInitializers(testSE);
	std::cout &lt;&lt; "\n    removing C++ initializers: " &lt;&lt; show(testSE);

	testSE.clone(seIn);
	GrammarHelper::removeFunctionArgs(testSE);
	std::cout &lt;&lt; "\n    removing function args: " &lt;&lt; show(testSE);

	testSE.clone(seIn);
	GrammarHelper::removeCallingArgQualifiers(testSE);
	std::cout &lt;&lt; "\n    removing qualifiers in function calling sequence: " &lt;&lt; show(testSE);
	std::cout &lt;&lt; "\n";
</details>}
int main()
<details><summary>{</summary>
	Utilities::StringHelper::Title("Testing Grammar Functions");
	std::cout &lt;&lt; "\n  Note:";
	std::cout &lt;&lt; "\n  - Test functions are applied to SemiExps that they should change and those they should not.";
	std::cout &lt;&lt; "\n  - The intent is to make sure they do what they are supposed to do without harming SemiExps";
	std::cout &lt;&lt; "\n  - that should not change.\n";

	Toks tokset0 = { "/* Test0 */", ";" };
	Toks tokset1 = { "/* Test1 */", "extern", "int", "x", "[", "2", "]", "=", "{", "1", ",", "2", "}", ";" };
	Toks tokset2 = { "/* Test2 */", "extern", "int", "x", "[", "2", "]", "{", "1", ",", "2", "}", ";" };
	Toks tokset3 = { "/* Test3 */", "if", "(", "x", "==", "y", ")", "doThing", "(", "3", ")", ";" };
	Toks tokset4 = { "/* Test4 */", "void", "fun", "(", "int", "anInteger", ")", "{" };
	Toks tokset5 = { "/* Test5 */", "void", "fun", "(", "int", "anInteger", ")", ";" };
	Toks tokset6 = { "/* Test6 */", "int", "fun", "(", "const", "int", "&", "anItegerRef", ")", ";" };
	Toks tokset7 = { "/* Test7 */", "template", "&lt;", "typename", "C", "&gt;", "class", "A", "{" };
	Toks tokset8 = { "/* Test7 */", "template", "&lt;", "typename", "C", "&gt;", "void", "fun", "(", "const", "C", "&", "c", ")", "{" };
	Toks tokset9 = { "/* Test9 */", "std", "::","vector", "&lt;", "std", "::", "string", "&gt;", "aVec", ";" };
	Toks tokset10 = { "/* Test10 */", "ClassName", "(", ")", ";" };
	Toks tokset11 = { "/* Test11 */", "~", "ClassName", "(", ")", ";" };
	Toks tokset12 = { "/* Test12 */", "ClassName", "(", "int", "count", ")", ";" };
	Toks tokset13 = { "/* Test13 */", "ClassName", "(", "int", "count", ")", ":", "count_", "(", "count", ")", "{" };
	Toks tokset14 = { "/* Test14 */", "Scanner", "::", "SemiExp", "se", "(", "nullPtr", ")", ";" };
	Toks tokset15 = { "/* Test15 */", "public", "abstract", "void", "doAction", "(", "CSemi", ".", "CSemiExp", "semi", ")", ";" };

	Scanner::SemiExp se;

	load(tokset0, se);
	test(se);
	load(tokset1, se);
	test(se);
	load(tokset2, se);
	test(se);
	load(tokset3, se);
	test(se);
	load(tokset4, se);
	test(se);
	load(tokset5, se);
	test(se);
	load(tokset6, se);
	test(se);
	load(tokset7, se);
	test(se);
	load(tokset8, se);
	test(se);
	load(tokset9, se);
	test(se);
	load(tokset10, se);
	test(se);
	load(tokset11, se);
	test(se);
	load(tokset12, se);
	test(se);
	load(tokset13, se);
	test(se);
	load(tokset14, se);
	test(se);
	load(tokset15, se);
	test(se);
</details>}
#endif


</pre></body></html>