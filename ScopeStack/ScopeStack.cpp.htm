<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp-----!>
<!-------Published on :04:04:2017 15:35:30-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp</a><br> </div></hr><pre>///////////////////////////////////////////////////////////////////////////////
// ScopeStack.cpp - implements template stack holding specified element type //
// ver 2.2                                                                   //
// Language:      Visual C++ 2010, SP1                                       //
// Platform:      Dell Precision T7400, Win 7 Pro SP1                        //
// Application:   Code Analysis Research                                     //
// Author:        Jim Fawcett, CST 4-187, Syracuse University                //
//                (315) 443-3948, jfawcett@twcny.rr.com                      //
///////////////////////////////////////////////////////////////////////////////

//----&lt; test stub &gt;------------------------------------------------------

#ifdef TEST_SCOPESTACK

#include "ScopeStack.h"
#include "../Utilities/Utilities.h"
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;sstream&gt;

using namespace CodeAnalysis;

struct element
<details><summary>{</summary>
	std::string type;
	std::string name;
	size_t startLineCount = 0;
	size_t endLineCount = 0;
	std::string path_;
	std::string show()
<details><summary>	{</summary>
		std::ostringstream temp;
		temp &lt;&lt; "(";
		temp &lt;&lt; type;
		temp &lt;&lt; ", ";
		temp &lt;&lt; name;
		temp &lt;&lt; ", ";
		temp &lt;&lt; startLineCount;
		temp &lt;&lt; ", ";
		temp &lt;&lt; endLineCount;
		temp &lt;&lt; ")";
		return temp.str();
</details>	}
	std::vector&lt;element*&gt; children_;
</details>};

int main()
<details><summary>{</summary>
	ScopeStack&lt;element*&gt;::Rslt::attach(&std::cout);
	ScopeStack&lt;element*&gt;::Rslt::start();

	using Utils = Utilities::StringHelper;

	Utils::Title("Testing Scope Stack");

	Utils::title("pushing items onto ScopeStack instance after adding startLineCount");

	ScopeStack&lt;element*&gt; testStack;
	element* pItem = new element;

	pItem-&gt;type = "function";
	pItem-&gt;name = "fun1";
	pItem-&gt;startLineCount = 33;
	testStack.push(pItem);

	pItem = new element;
	pItem-&gt;type = "if";
	pItem-&gt;name = "";
	pItem-&gt;startLineCount = 38;
	(testStack.top()-&gt;children_).push_back(pItem);
	testStack.push(pItem);

	pItem = new element;
	pItem-&gt;type = "for";
	pItem-&gt;name = "";
	pItem-&gt;startLineCount = 40;
	(testStack.top()-&gt;children_).push_back(pItem);
	testStack.push(pItem);

	showStack&lt;element&gt;(testStack, false);
	std::cout &lt;&lt; std::endl;

	Utils::title("top and predecessor are:");
	std::cout &lt;&lt; "\n  " &lt;&lt; testStack.top()-&gt;show();
	std::cout &lt;&lt; "\n  " &lt;&lt; testStack.predOfTop()-&gt;show();
	std::cout &lt;&lt; "\n";

	Utils::title("Popping two items off ScopeStack after adding endLineCount");

	testStack.top()-&gt;endLineCount = 50;
	std::cout &lt;&lt; "\n  " &lt;&lt; testStack.pop()-&gt;show();
	testStack.top()-&gt;endLineCount = 55;
	std::cout &lt;&lt; "\n  " &lt;&lt; testStack.pop()-&gt;show();
	std::cout &lt;&lt; "\n";

	Utils::title("pushing another item onto ScopeStack after adding startLineElement");
	pItem = new element;
	pItem-&gt;type = "while";
	pItem-&gt;name = "";
	pItem-&gt;startLineCount = 60;
	std::cout &lt;&lt; "\n  " &lt;&lt; pItem-&gt;show();
	(testStack.top()-&gt;children_).push_back(pItem);
	testStack.push(pItem);
	std::cout &lt;&lt; "\n";

	Utils::title("stack now contains:");
	showStack&lt;element&gt;(testStack, false);
	std::cout &lt;&lt; "\n";

	Utils::title("popping last elements off stack after adding endLineCount");
	testStack.top()-&gt;endLineCount = 70;
	element* pTop = testStack.pop();
	std::cout &lt;&lt; "\n  " &lt;&lt; pTop-&gt;show();
	testStack.top()-&gt;endLineCount = 75;
	pTop = testStack.pop();
	std::cout &lt;&lt; "\n  " &lt;&lt; pTop-&gt;show();
	std::cout &lt;&lt; "\n";

	Utils::title("walking simulated AST tree:");
	TreeWalk(pTop);
	std::cout &lt;&lt; "\n\n";
</details>}

#endif
</pre></body></html>