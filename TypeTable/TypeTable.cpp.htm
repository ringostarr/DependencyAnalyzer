<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\TypeTable\TypeTable.cpp-----!>
<!-------Published on :04:04:2017 15:35:50-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\TypeTable\TypeTable.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\TypeTable\TypeTable.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\NoSqlDb\NoSqlDb.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\NoSqlDb\NoSqlDb.cpp</a><br> </div></hr><pre>#include "TypeTable.h"
#include&lt;iostream&gt;
#include&lt;string&gt;
//sets value 
void Value::setvalue(std::string path, std::string namesp,std::string typenamex)
<details><summary>{</summary>
	filename = path;
	nsname = namesp;
	type = typenamex;
</details>}
//returns filepath
std::string Value::getfn()
<details><summary>{</summary>
	return filename;
</details>}
//returns namespace
std::string Value::getns()
<details><summary>{</summary>
	return nsname;
</details>}
//returns type
std::string Value::getyp()
<details><summary>{</summary>
	return type;
</details>}
//set value of preexisting
void TypeTable::setvalue(std::string k, Value v)
<details><summary>{</summary>
	//if (Typtab.find(k) == Typtab.end())
	
		Typtab[k].push_back(v);
	
</details>}
//return map
std::unordered_map&lt;std::string, std::vector&lt; Value&gt;&gt; TypeTable::gettypetable()// gettypetable();
<details><summary>{</summary>
	return Typtab;
</details>}
//display function
void TypeTable::displayTab()
<details><summary>{</summary>
	std::cout &lt;&lt; "\n\n===================Displaying TypeTable Req 4 ====================================\n\n";
	std::cout &lt;&lt; "Name       Type          Path                                                           Namespace\n";
	std::cout &lt;&lt; "-----------------------------------------------------------------------------------------------------\n";
	Keys ks;
	ks = Key();
	for (std::string k : ks)
<details><summary>	{</summary>
		for (size_t i=0;i&lt;Typtab[k].size();i++)
<details><summary>		{</summary>
			std::cout &lt;&lt; "\n" &lt;&lt; k;
		std::string fn= Typtab[k][i].getfn();
		std::string nn = Typtab[k][i].getns();
		std::string tn = Typtab[k][i].getyp();
		std::cout &lt;&lt;"---"&lt;&lt;tn&lt;&lt;"---"&lt;&lt; fn &lt;&lt; "---" &lt;&lt; nn;
		std::cout &lt;&lt; "\n";
</details>		}
</details>	}
</details>}
#ifdef  TEST_TT

 //  TEST_TT

int main()
<details><summary>{</summary>
	Value v;
	v.setvalue("abc", { "asd","kkk" });
	TypeTable tx;
	tx.setvalue("key1", v);
	tx.display();
</details>}
#endif
</pre></body></html>