<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.cpp-----!>
<!-------Published on :04:04:2017 15:35:07-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Logger\Logger.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////
// Logger.cpp - log text messages to std::ostream                  //
// ver 1.2                                                         //
//-----------------------------------------------------------------//
// Jim Fawcett (c) copyright 2015                                  //
// All rights granted provided this copyright notice is retained   //
//-----------------------------------------------------------------//
// Language:    C++, Visual Studio 2015                            //
// Application: Several Projects, CSE687 - Object Oriented Design  //
// Author:      Jim Fawcett, Syracuse University, CST 4-187        //
//              jfawcett@twcny.rr.com                              //
/////////////////////////////////////////////////////////////////////

#include &lt;functional&gt;
#include &lt;fstream&gt;
#include &lt;windows.h&gt;
#include "Logger.h"
#include "../Utilities/Utilities.h"

using namespace Logging;

//----&lt; send text message to std::ostream &gt;--------------------------

void Logger::write(const std::string& msg)
<details><summary>{</summary>
	if (_ThreadRunning)
		_queue.enQ(msg);
</details>}
void Logger::title(const std::string& msg, char underline)
<details><summary>{</summary>
	std::string temp = "\n  " + msg + "\n " + std::string(msg.size() + 2, underline);
	write(temp);
</details>}
//----&lt; attach logger to existing std::ostream &gt;---------------------

void Logger::attach(std::ostream* pOut)
<details><summary>{</summary>
	streams_.push_back(pOut);
	//_pOut = pOut; 
</details>}
//----&lt; start logging &gt;----------------------------------------------
/*
*  log to all the attached streams
*/
void Logger::start()
<details><summary>{</summary>
	if (_ThreadRunning)
		return;
	_ThreadRunning = true;
<details><summary>	std::function&lt;void()&gt; tp = [=]() {</summary>
		while (true)
<details><summary>		{</summary>
			std::string msg = _queue.deQ();
			if (msg == "quit")
<details><summary>			{</summary>
				_ThreadRunning = false;
				break;
</details>			}
			for (auto pStrm : streams_)
<details><summary>			{</summary>
				*pStrm &lt;&lt; msg;
</details>			}
</details>		}
</details>	};
	_pThr = new std::thread(tp);
	//thr.detach();
</details>}
//----&lt; has logger been started? &gt;-----------------------------------

bool Logger::running()
<details><summary>{</summary>
	return _ThreadRunning;
</details>}
//----&lt; suspend logger &gt;---------------------------------------------

void Logger::pause(bool doPause)
<details><summary>{</summary>
	if (doPause)
<details><summary>	{</summary>
		_Paused = true;
		::SuspendThread(_pThr-&gt;native_handle());
</details>	}
	else
<details><summary>	{</summary>
		_Paused = false;
		::ResumeThread(_pThr-&gt;native_handle());
</details>	}
</details>}
//----&lt; is logger currently paused? &gt;--------------------------------

bool Logger::paused()
<details><summary>{</summary>
	return _Paused;
</details>}
//----&lt; wait for logging to empty input queue &gt;----------------------

void Logger::flush()
<details><summary>{</summary>
	if (_ThreadRunning && !_Paused)
<details><summary>	{</summary>
		while (_queue.size() &gt; 0)
			;
		for (auto pStream : streams_)
			pStream-&gt;flush();
</details>	}
</details>}
//----&lt; stop logging &gt;-----------------------------------------------

void Logger::stop(const std::string& msg)
<details><summary>{</summary>
	if (_ThreadRunning)
<details><summary>	{</summary>
		if (msg != "")
			write(msg);
		write("quit");    // request thread to stop
		if (_pThr-&gt;joinable())
			_pThr-&gt;join();  // wait for queue to empty

		_ThreadRunning = false;
</details>	}
</details>}
//----&lt; wait for logger to finish &gt;----------------------------------

void Logger::wait()
<details><summary>{</summary>
	if (_ThreadRunning && _pThr-&gt;joinable())
		_pThr-&gt;join();
</details>}
//----&lt; stop logging thread &gt;----------------------------------------

Logger::~Logger()
<details><summary>{</summary>
	stop();
</details>}

struct Cosmetic
<details><summary>{</summary>
	~Cosmetic() { std::cout &lt;&lt; "\n\n"; }
</details>} cosmetic;

#ifdef TEST_LOGGER

using Util = Utilities::StringHelper;

int main()
<details><summary>{</summary>
	//Util::Title("Testing Logger Class");
	Logger log;
	log.attach(&std::cout);
	std::ofstream out("logFile.txt");
	if (out.good())
		log.attach(&out);
	else
		std::cout &lt;&lt; "\n  couldn't open logFile for writing";
	log.write("\n  won't get logged - not started yet");
	log.start();
	log.title("Testing Logger Class", '=');
	log.write("\n  one");
	log.write("\n  two");
	log.write("\n  fini");
	log.stop();
	log.write("\n  won't get logged - stopped");
	log.start();
	log.write("\n  starting again");
	log.write("\n  and stopping again");
	log.stop("\n  log terminating now");
	log.wait();

	StaticLogger&lt;1&gt;::attach(&std::cout);
	StaticLogger&lt;1&gt;::attach(&out);
	StaticLogger&lt;1&gt;::start();
	StaticLogger&lt;1&gt;::write("\n");
	StaticLogger&lt;1&gt;::title("Testing StaticLogger class");
	StaticLogger&lt;1&gt;::write("\n  static logger at work");
	Logger& logger = StaticLogger&lt;1&gt;::instance();
	logger.write("\n  static logger still at work");

	for (size_t i = 0; i&lt;5; ++i)
		logger.write("\n  a log msg");
	logger.write("\n  suspending logger");
	logger.pause(true);
	for (size_t i = 0; i&lt;5; ++i)
		logger.write("\n  a log msg written while log suspended");

	logger.pause(false);
	logger.write("\n  a log msg written after log resumed");
	logger.stop("\n  stopping static logger");
	logger.wait();
	out.close();
</details>}

#endif
</pre></body></html>