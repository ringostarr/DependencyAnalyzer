<!DOCTYPE html><html><head>
<!-------------HTML Prologue------------!>
<!---Published By: Akshay , 708 S Beech Street , Syracuse .--!>
<!----------------------(315)-289-0056----------------------!>
<!----Package Name:C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.cpp-----!>
<!-------Published on :04:04:2017 15:34:34-----!>
<link rel=stylesheet type=text/css href="./../Stylesheet.css"/></head> <div class = indent><h4>Dependencies:</h4><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\AbstractSyntaxTree\AbstractSyntaxTree.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\DepAnal.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ActionsAndRules.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\ConfigureParser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Parser\Parser.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\StrongComponent\StComponent.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\StrongComponent\StComponent.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\oodp26\Executive.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\GrammerHelpers\GrammerHelpers.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\ScopeStack\ScopeStack.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlParser.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\Utilities\Utilities.h</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\XmlDocument\XmlElement.cpp</a><br><a href = "C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp.htm">C:\Users\Ringo\Documents\Visual Studio 2017\Projects\oodp26\FileMgr\FileSystem.cpp</a><br> </div></hr><pre>/////////////////////////////////////////////////////////////////////
//  AbstrSynTree.cpp - Represents an Abstract Syntax Tree          //
//  ver 1.3                                                        //
//  Language:      Visual C++ 2015                                 //
//  Platform:      Dell XPS 8900, Windows 10                       //
//  Application:   Used to support parsing source code             //
//  Author:        Jim Fawcett, CST 4-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include "AbstractSyntaxTree.h"
#include "../Utilities/Utilities.h"

using namespace CodeAnalysis;

//----&lt; default initialization for ASTNodes &gt;------------------------

ASTNode::ASTNode()
	: type_("anonymous"), name_("none"), startLineCount_(0), endLineCount_(0), complexity_(0) {}

//----&lt; initialization accepting type and name &gt;---------------------

ASTNode::ASTNode(const Type& type, const Name& name)
	: type_(type), name_(name), startLineCount_(0), endLineCount_(0), complexity_(0) {}

//----&lt; destructor deletes children, statements, declarations &gt;------

ASTNode::~ASTNode()
<details><summary>{</summary>
	for (auto pNode : children_)
		delete pNode;
	for (auto pNode : statements_)
		delete pNode;
	for (auto node : decl_)
<details><summary>	{</summary>
		delete node.pTc;
</details>	}
</details>}
//----&lt; returns string with ASTNode description &gt;--------------------
//akshay
<details><summary>ASTNode * CodeAnalysis::AbstrSynTree::findRecursively(const ClassName & type, ASTNode * node) {</summary>
	if (node-&gt;name_ == type) return node;
<details><summary>	for (auto n : node-&gt;children_) {</summary>
		if (n-&gt;name_ == type) return n;
</details>	}
	for (auto n : node-&gt;children_)
		return findRecursively(type, n);
	return nullptr;
</details>}
std::string ASTNode::show(bool details)
<details><summary>{</summary>
	std::ostringstream temp;
	temp &lt;&lt; "(";
	temp &lt;&lt; type_ &lt;&lt; ", ";
	if (name_ != "none")
		temp &lt;&lt; name_ &lt;&lt; ", ";
	if (type_ == "namespace" || type_ == "class" || type_ == "interface" || type_ == "struct" || type_ == "function")
		temp &lt;&lt; package_ &lt;&lt; ", ";
	if (details)
<details><summary>	{</summary>
		temp &lt;&lt; "num children: " &lt;&lt; children_.size() &lt;&lt; ", ";
		temp &lt;&lt; "num statements: " &lt;&lt; statements_.size() &lt;&lt; ", ";
</details>	}
	temp &lt;&lt; "line: " &lt;&lt; startLineCount_ &lt;&lt; ", ";
	temp &lt;&lt; "size: " &lt;&lt; endLineCount_ - startLineCount_ + 1 &lt;&lt; ", ";
	temp &lt;&lt; "cplx: " &lt;&lt; complexity_;
	//temp &lt;&lt; "path: " &lt;&lt; path_;
	temp &lt;&lt; ")";
	return temp.str();
</details>}
//----&lt; create instance and initialize first element &gt;---------------
/*
*  - Every AST holds an ASTNode representing the global namespace
*  - Its children will be namespaces, classes, and global data
*/
AbstrSynTree::AbstrSynTree(ScopeStack&lt;ASTNode*&gt;& stack) : stack_(stack)
<details><summary>{</summary>
	pGlobalNamespace_ = new ASTNode("namespace", "Global Namespace");
	pGlobalNamespace_-&gt;startLineCount_ = 1;
	pGlobalNamespace_-&gt;endLineCount_ = 1;
	stack_.push(pGlobalNamespace_);
</details>}
//----&lt; destroy instance and all it's ASTNodes &gt;---------------------
/*
*  AST destructor only has to delete its root.  The root will then
*  delete its children, causing the children to delete their children,
*  yada, yada, yada
*/
AbstrSynTree::~AbstrSynTree()
<details><summary>{</summary>
	delete pGlobalNamespace_;
</details>}
//----&lt; return or accept pointer to global namespace &gt;---------------

ASTNode*& AbstrSynTree::root()
<details><summary>{</summary>
	return pGlobalNamespace_;
</details>}
//----&lt; return AST typemap &gt;-----------------------------------------
/*
*  Type map holds ClassName keys linked to each class's ASTNode
*/
AbstrSynTree::TypeMap& AbstrSynTree::typeMap()
<details><summary>{</summary>
	return typeMap_;
</details>}
//----&lt; add ASTNode ptr to stack top element's children and push &gt;---
/*
* - Add new scope to ScopeStack after linking to its parent scope
* - If type is a class or struct, add to typeMap
*/
void AbstrSynTree::add(ASTNode* pNode)
<details><summary>{</summary>
	stack_.top()-&gt;children_.push_back(pNode);  // add as child of stack top
	stack_.push(pNode);                        // push onto stack
	if (pNode-&gt;type_ == "class" || pNode-&gt;type_ == "struct" || pNode-&gt;type_ == "interface" )
		typeMap_[pNode-&gt;name_] = pNode;
</details>}
//----&lt; pop stack's top element &gt;------------------------------------
/*
*  - called at end of scope
*  - pop'd ASTNode is still linked to AST
*/
ASTNode* AbstrSynTree::pop()
<details><summary>{</summary>
	return stack_.pop();
</details>}
//----&lt; find a type node using typeMap &gt;-----------------------------
/*
*  Retrieve ASTNode of class if it exists
*/
ASTNode* AbstrSynTree::find(const ClassName& className)
<details><summary>{</summary>
	auto iter = typeMap_.find(className);
	if (iter != typeMap_.end())
<details><summary>	{</summary>
		return iter-&gt;second;
</details>	}
	return findRecursively(className, pGlobalNamespace_);

</details>}

//----&lt; Test Stub &gt;--------------------------------------------------
/*
*  Demonstrates that AbstrSynTree can build a simple Abstract
*  Syntax Tree and display its contents.
*/
#ifdef TEST_ABSTRSYNTREE

#include &lt;functional&gt;
//#include &lt;iostream&gt;

using Utils = Utilities::StringHelper;

int main()
<details><summary>{</summary>
	Utils::Title("Testing AbstrSynTree and ASTNode");

	ScopeStack&lt;ASTNode*&gt; stack;
	AbstrSynTree ast(stack);
	ASTNode* pX = new ASTNode("class", "X");
	ast.add(pX);                                        // add X scope
	ASTNode* pf1 = new ASTNode("function", "f1");
	ast.add(pf1);                                       // add f1 scope
	ASTNode* pc1 = new ASTNode("control", "if");
	ast.add(pc1);                                       // add c1 scope
	ast.pop();                                          // end c1 scope
	ast.pop();                                          // end f1 scope
	ASTNode* pf2 = new ASTNode("function", "f2");
	ast.add(pf2);                                       // add f2 scope
	ast.pop();                                          // end f2 scope
	ast.pop();                                          // end X scope

	std::function&lt;void(ASTNode*, size_t)&gt; co = [](ASTNode* pNode, size_t indentLevel)
<details><summary>	{</summary>
		std::cout &lt;&lt; "\n  " &lt;&lt; std::string(2 * indentLevel, ' ') &lt;&lt; pNode-&gt;show();
</details>	};

	ASTWalk(ast.root(), co);
	std::cout &lt;&lt; "\n";

	Utils::title("testing AbstrSynTree::find");

	ASTNode* pFind = ast.find("X");
	if (pFind != nullptr)
		std::cout &lt;&lt; "\n  " &lt;&lt; pFind-&gt;show();
	else
		std::cout &lt;&lt; "\n  could not find ASTNode for class X";

	std::cout &lt;&lt; "\n\n";
</details>}

#endif
</pre></body></html>